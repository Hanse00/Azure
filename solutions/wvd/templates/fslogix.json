{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "DomainAdminPassword": {
            "type": "securestring"
        },
        "DomainAdminUsername": {
            "type": "string"
        },
        "DomainControllerName": {
            "type": "string"
        },
        "DomainControllerResourceGroupName": {
            "type": "string"
        },
        "DomainName": {
            "type": "string"
        },
        "FileShareQuota": {
            "type": "int"
        },
        "HostPoolName": {
            "type": "string"
        },
        "KerberosEncryptionType": {
            "type": "string"
        },
        "Location": {
            "type": "string"
        },
        "Netbios": {
            "type": "string"
        },
        "newOrExisting": {
            "type": "string"
        },
        "OuPath": {
            "type": "string"
        },
        "SecurityPrincipalId": {
            "type": "string"
        },
        "StorageAccountName": {
            "type": "string"
        },
        "StorageAccountSku": {
            "type": "string"
        },
        "Tags": {
            "type": "object"
        },
        "Timestamp": {
            "type": "string"
        }
    },
    "functions": [],
    "variables": {
        "ManagedID": "uami-fslogix",
        "ResourceGroupName": "[resourceGroup().name]"
    },
    "resources": [
        {
            "comments": "---------- STORAGE ACCOUNT ----------",
            "condition": "[equals(parameters('newOrExisting'), 'new')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('StorageAccountName')]",
            "location": "[parameters('Location')]",
            "tags": "[parameters('Tags')]",
            "sku": {
                "name": "[parameters('StorageAccountSku')]",
                "tier": "[split(parameters('StorageAccountSku'), '_')[0]]"
            },
            "kind": "[if(equals(split(parameters('StorageAccountSku'), '_')[0], 'Standard'), 'StorageV2', 'FileStorage')]",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "largeFileSharesState": "Enabled",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "comments": "---------- STORAGE ACCOUNT > FILE SERVICES ----------",
            "condition": "[equals(parameters('newOrExisting'), 'new')]",
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(parameters('StorageAccountName'), '/default')]",
            "tags": "[parameters('Tags')]",
            "dependsOn": [
                "[parameters('StorageAccountName')]"
            ],
            "properties": {
                "shareDeleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "comments": "---------- STORAGE ACCOUNT > FILE SHARE ----------",
            "condition": "[equals(parameters('newOrExisting'), 'new')]",
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('StorageAccountName'), '/default/', parameters('HostPoolName'))]",
            "tags": "[parameters('Tags')]",
            "dependsOn": [
                "[parameters('StorageAccountName')]",
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('StorageAccountName'), 'default')]"
            ],
            "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": "[parameters('FileShareQuota')]",
                "enabledProtocols": "SMB"
            }
        },
        {
            "comments": "---------- USER ASSIGNED MANAGED IDENTITY ----------",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('ManagedID')]",
            "apiVersion": "2018-11-30",
            "location": "[parameters('Location')]",
            "tags": "[parameters('Tags')]"
        },
        {
            "comments": "---------- ROLE ASSIGNMENT > USER ASSIGNED MANAGED IDENTITY > CONTRIBUTOR ----------",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "d42f2db4-0105-4cef-8ff5-2c9c25088a5d",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('ManagedID'))]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(concat(subscription().id, '/resourceGroups/', variables('ResourceGroupName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', variables('ManagedID')), '2018-11-30', 'Full').properties.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "comments": "---------- DEPLOYMENT SCRIPT > STORAGE ACCOUNT KERBEROS KEY ----------",
            "name": "ds-kerberosKey",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('ManagedID'))]": {}
                }
            },
            "location": "[parameters('Location')]",
            "kind": "AzurePowerShell",
            "tags": "[parameters('Tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('ManagedID'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', 'd42f2db4-0105-4cef-8ff5-2c9c25088a5d')]"
            ],
            "properties": {
                "azPowerShellVersion": "5.6.0",
                "cleanupPreference": "OnSuccess",
                "scriptContent": "
                    param(
                        [string] [Parameter(Mandatory=$true)] $StorageAccountName,
                        [string] [Parameter(Mandatory=$true)] $ResourceGroupName
                    )
                    $Test = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ListKerbKey | Where-Object {$_.Keyname -contains 'kerb1'}).Value
                    if(!$Test)
                    {
                        New-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -KeyName kerb1
                        $Output = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ListKerbKey | Where-Object {$_.Keyname -contains 'kerb1'}).Value
                    } 
                    else 
                    {
                        $Output = $Test
                    }
                    Write-Output $Output
                    $DeploymentScriptOutputs = @{}
                    $DeploymentScriptOutputs['text'] = $Output
                ",
                "arguments": "[format(' -StorageAccountName {0} -ResourceGroup {1}', parameters('StorageAccountName'), variables('ResourceGroupName'))]",
                "forceUpdateTag": "[parameters('Timestamp')]",
                "retentionInterval": "P1D",
                "timeout": "PT30M"
            }
        },
        {
            "name": "[concat('ADComputerObject_', parameters('Timestamp'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[parameters('DomainControllerResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/jamasten/Azure/master/solutions/wvd/templates/adComputerObject.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "DomainAdminPassword": {
                        "value": "[parameters('DomainAdminPassword')]"
                    },
                    "DomainAdminUsername": {
                        "value": "[parameters('DomainAdminUsername')]"
                    },
                    "DomainControllerName": {
                        "value": "[parameters('DomainControllerName')]"
                    },
                    "KerberosEncryptionType": {
                        "value": "[parameters('KerberosEncryptionType')]"
                    },
                    "KerberosKey": {
                        "value": "[reference('ds-kerberosKey').outputs.text]"
                    },
                    "Location": {
                        "value": "[parameters('Location')]"
                    },
                    "Netbios": {
                        "value": "[parameters('Netbios')]"
                    },
                    "OuPath": {
                        "value": "[parameters('OuPath')]"
                    },
                    "StorageAccountName": {
                        "value": "[parameters('StorageAccountName')]"
                    },
                    "Tags": {
                        "value": "[parameters('Tags')]"
                    },
                    "Timestamp": {
                        "value": "[parameters('Timestamp')]"
                    }
                }
            }
        },
        {
            "comments": "---------- DEPLOYMENT SCRIPT > ENABLE AD AUTH ON STORAGE ACCOUNT ----------",
            "name": "ds-enableAuth",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('ManagedID'))]": {}
                }
            },
            "location": "[parameters('Location')]",
            "kind": "AzurePowerShell",
            "tags": "[parameters('Tags')]",
            "dependsOn": [
                "[concat('ADComputerObject_', parameters('Timestamp'))]"
            ],
            "properties": {
                "azPowerShellVersion": "5.6.0",
                "cleanupPreference": "OnSuccess",
                "scriptContent": "
                    param(
                        [string] [Parameter(Mandatory=$true)] $StorageAccountName,
                        [string] [Parameter(Mandatory=$true)] $ResourceGroupName,
                        [string] [Parameter(Mandatory=$true)] $DomainName,
                        [string] [Parameter(Mandatory=$true)] $Netbios,
                        [array] [Parameter(Mandatory=$true)] $DomainInfo
                    )

                    Set-AzStorageAccount `
                        -ResourceGroupName $ResourceGroupName `
                        -Name $StorageAccountName `
                        -EnableActiveDirectoryDomainServicesForFile $true `
                        -ActiveDirectoryDomainName $DomainName `
                        -ActiveDirectoryNetBiosDomainName $Netbios `
                        -ActiveDirectoryForestName $DomainName `
                        -ActiveDirectoryDomainGuid $DomainInfo[0] `
                        -ActiveDirectoryDomainsid $DomainInfo[1] `
                        -ActiveDirectoryAzureStorageSid $DomainInfo[2]
                ",
                "arguments": "[format(' -StorageAccountName {0} -ResourceGroup {1} -DomainName {2} -Netbios {3} -DomainInfo {4}', parameters('StorageAccountName'), variables('ResourceGroupName'), parameters('DomainName'), parameters('Netbios'), reference(concat('ADComputerObject_', parameters('Timestamp'))).outputs.DomainInfo.value)]",
                "forceUpdateTag": "[parameters('Timestamp')]",
                "retentionInterval": "P1D",
                "timeout": "PT30M"
            }
        },
        {
            "comments": "---------- ROLE ASSIGNMENT > FILE SHARE > Storage File Data SMB Share Contributor ----------",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('StorageAccountName'), 'default', parameters('HostPoolName'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "deb6f557-7e50-4881-bfff-e8e2b5d597e2",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('StorageAccountName'), 'default', parameters('HostPoolName'))]",
                "ds-enableAuth"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                "principalId": "[parameters('SecurityPrincipalId')]"
            }
        }
    ]
}